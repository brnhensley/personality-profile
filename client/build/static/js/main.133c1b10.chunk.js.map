{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/PersonalityBreakdown.jsx","components/WatsonInput.jsx","components/App.jsx","serviceWorker.js","index.jsx"],"names":["Header","react_default","a","createElement","className","Footer","id","PersonalityBreakdown","props","results","JSON","parse","stringify","watsonResponse","Fragment","twitterHandle","Object","values","traits","map","personalityTrait","key","indexOf","name","percentile","toFixed","children","subTrait","needs","need","WatsonInput","_useState","useState","displayHandle","_useState2","slicedToArray","data","setData","search","onSubmit","event","preventDefault","fetch","concat","then","res","json","objectSpread","type","placeholder","onChange","target","value","renderPage","components_PersonalityBreakdown","App","react","components_Header","components_WatsonInput","components_Footer","React","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.133c1b10.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n\r\n  return (\r\n    <div className=\"window header\">\r\n      <h1>The Judgement-o-tron</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Footer() {\r\n\r\n  return (\r\n    <footer className=\"window footer\">\r\n      <p id=\"footer\">Â© 2019 Brian Hensley</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction PersonalityBreakdown(props) {\r\n\tlet results = JSON.parse(JSON.stringify(props.watsonResponse));\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div className=\"window\">\r\n\t\t\t\t<h2>Personality Analysis of Twitter user @{props.twitterHandle}</h2>\r\n\t\t\t</div>\r\n\r\n\t\t\t{Object.values(results.traits).map(function (personalityTrait) {\r\n\t\t\t\treturn <div className=\"window\" key={results.traits.indexOf(personalityTrait)}>\r\n\t\t\t\t\t<h3>Big Five Personality Trait: {personalityTrait.name}: {(personalityTrait.percentile * 100).toFixed(2)}%</h3>\r\n\r\n\t\t\t\t\t{Object.values(personalityTrait.children).map(function (subTrait) {\r\n\t\t\t\t\t\treturn <h5 key={personalityTrait.children.indexOf(subTrait)}>\r\n\t\t\t\t\t\t\t{subTrait.name} - {(subTrait.percentile * 100).toFixed(2)}%\r\n              \t\t\t</h5>\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t})}\r\n\r\n\t\t\t<div className=\"window\">\r\n\t\t\t\t<h3>Maslow's hierarchy of needs</h3>\r\n\r\n\t\t\t\t{Object.values(results.needs).map(function (need) {\r\n\t\t\t\t\treturn <h5 key={results.needs.indexOf(need)}>\r\n\t\t\t\t\t\t{need.name}: {(need.percentile * 100).toFixed(2)}%\r\n\t\t\t\t\t</h5>\r\n\t\t\t\t})}\r\n\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\nPersonalityBreakdown.propTypes = {\r\n\twatsonResponse: PropTypes.any.isRequired,\r\n\ttwitterHandle: PropTypes.any.isRequired\r\n};\r\n\r\nexport default PersonalityBreakdown;","import React, { useState } from 'react';\r\nimport PersonalityBreakdown from './PersonalityBreakdown';\r\n// import rd3 from 'react-d3-library'  - For Later\r\n\r\n\r\nconst WatsonInput = () => {\r\n\r\n\tconst [data, setData] = useState({\r\n\t\twatsonResponse: null,\r\n\t\ttwitterHandle: '',\r\n\t\tdisplayHandle: ''\r\n\t})\r\n\r\n\tconst callWatsonAPI = () => {\r\n\t\tfetch(`http://localhost:9000/watsonAPI?name=${data.twitterHandle}`)\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => setData({ ...data, watsonResponse: res }))\r\n\t\t\t.then(data.displayHandle = data.twitterHandle)\r\n\t}\r\n\r\n\tlet search = <div className=\"window\">\r\n\t\t<h3>Enter a Twitter user's handle to get a personality breakdown based on their posting history</h3>\r\n\t\t<p className=\"patient\">Be patient, Watson needs to think...</p>\r\n\r\n\t\t<form onSubmit={event => {\r\n\t\t\tevent.preventDefault()\r\n\t\t\tcallWatsonAPI();\r\n\t\t}}>\r\n\t\t\t<input\r\n\t\t\t\ttype='text'\r\n\t\t\t\tid='twitterHandle'\r\n\t\t\t\tplaceholder='Enter a Twitter handle'\r\n\t\t\t\tonChange={event => setData({ ...data, twitterHandle: event.target.value })}\r\n\t\t\t/>\r\n\t\t\t<button type='submit'>Search</button>\r\n\t\t</form>\r\n\t</div>\r\n\r\n\t// let personalityBreakdown = ;\r\n\tlet renderPage = data.watsonResponse !== null ? <PersonalityBreakdown watsonResponse={data.watsonResponse} twitterHandle={data.displayHandle} /> : search;\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{renderPage}\r\n\t\t</React.Fragment>\r\n\t);\r\n\r\n}\r\n\r\nexport default WatsonInput;","import * as React from 'react';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport WatsonInput from './WatsonInput';\r\n\r\nclass App extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<WatsonInput />\r\n\t\t\t\t<Footer />\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"./styles/styles.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}