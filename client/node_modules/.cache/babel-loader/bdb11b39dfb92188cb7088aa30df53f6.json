{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar helpers = require('./helpers');\n\nvar Parser = require('./parser');\n\nvar request = require('request');\n\nvar STATUS_CODES_TO_ABORT_ON = require('./settings').STATUS_CODES_TO_ABORT_ON;\n\nvar StreamingAPIConnection = function (reqOpts, twitOptions) {\n  this.reqOpts = reqOpts;\n  this.twitOptions = twitOptions;\n  this._twitter_time_minus_local_time_ms = 0;\n  EventEmitter.call(this);\n};\n\nutil.inherits(StreamingAPIConnection, EventEmitter);\n/**\n * Resets the connection.\n * - clears request, response, parser\n * - removes scheduled reconnect handle (if one was scheduled)\n * - stops the stall abort timeout handle (if one was scheduled)\n */\n\nStreamingAPIConnection.prototype._resetConnection = function () {\n  if (this.request) {\n    // clear our reference to the `request` instance\n    this.request.removeAllListeners();\n    this.request.destroy();\n  }\n\n  if (this.response) {\n    // clear our reference to the http.IncomingMessage instance\n    this.response.removeAllListeners();\n    this.response.destroy();\n  }\n\n  if (this.parser) {\n    this.parser.removeAllListeners();\n  } // ensure a scheduled reconnect does not occur (if one was scheduled)\n  // this can happen if we get a close event before .stop() is called\n\n\n  clearTimeout(this._scheduledReconnect);\n  delete this._scheduledReconnect; // clear our stall abort timeout\n\n  this._stopStallAbortTimeout();\n};\n/**\n * Resets the parameters used in determining the next reconnect time\n */\n\n\nStreamingAPIConnection.prototype._resetRetryParams = function () {\n  // delay for next reconnection attempt\n  this._connectInterval = 0; // flag indicating whether we used a 0-delay reconnect\n\n  this._usedFirstReconnect = false;\n};\n\nStreamingAPIConnection.prototype._startPersistentConnection = function () {\n  var self = this;\n\n  self._resetConnection();\n\n  self._setupParser();\n\n  self._resetStallAbortTimeout();\n\n  self._setOauthTimestamp();\n\n  this.reqOpts.encoding = 'utf8';\n  self.request = request.post(this.reqOpts);\n  self.emit('connect', self.request);\n  self.request.on('response', function (response) {\n    self._updateOauthTimestampOffsetFromResponse(response); // reset our reconnection attempt flag so next attempt goes through with 0 delay\n    // if we get a transport-level error\n\n\n    self._usedFirstReconnect = false; // start a stall abort timeout handle\n\n    self._resetStallAbortTimeout();\n\n    self.response = response;\n\n    if (STATUS_CODES_TO_ABORT_ON.indexOf(self.response.statusCode) !== -1) {\n      // We got a status code telling us we should abort the connection.\n      // Read the body from the response and return an error to the user.\n      var body = '';\n      self.request.on('data', function (chunk) {\n        body += chunk;\n      });\n      self.request.on('end', function () {\n        try {\n          body = JSON.parse(body);\n        } catch (jsonDecodeError) {} // Twitter may send an HTML body\n        // if non-JSON text was returned, we'll just attach it to the error as-is\n        // surface the error to the user\n\n\n        var error = helpers.makeTwitError('Bad Twitter streaming request: ' + self.response.statusCode);\n        error.statusCode = response ? response.statusCode : null;\n        helpers.attachBodyInfoToError(error, body);\n        self.emit('error', error); // stop the stream explicitly so we don't reconnect\n\n        self.stop();\n        body = null;\n      });\n      self.request.on('error', function (err) {\n        var twitErr = helpers.makeTwitError(err.message);\n        twitErr.statusCode = self.response.statusCode;\n        helpers.attachBodyInfoToError(twitErr, body);\n        self.emit('parser-error', twitErr);\n      });\n    } else if (self.response.statusCode === 420) {\n      // close the connection forcibly so a reconnect is scheduled by `self.onClose()`\n      self._scheduleReconnect();\n    } else {\n      // We got an OK status code - the response should be valid.\n      // Read the body from the response and return to the user.\n      //pass all response data to parser\n      self.request.on('data', function (data) {\n        self._connectInterval = 0;\n\n        self._resetStallAbortTimeout();\n\n        self.parser.parse(data);\n      });\n      self.response.on('close', self._onClose.bind(self));\n      self.response.on('error', function (err) {\n        // expose response errors on twit instance\n        self.emit('error', err);\n      }); // connected without an error response from Twitter, emit `connected` event\n      // this must be emitted after all its event handlers are bound\n      // so the reference to `self.response` is not interfered-with by the user until it is emitted\n\n      self.emit('connected', self.response);\n    }\n  });\n  self.request.on('close', self._onClose.bind(self));\n  self.request.on('error', function (err) {\n    self._scheduleReconnect.bind(self);\n  });\n  return self;\n};\n/**\n * Handle when the request or response closes.\n * Schedule a reconnect according to Twitter's reconnect guidelines\n *\n */\n\n\nStreamingAPIConnection.prototype._onClose = function () {\n  var self = this;\n\n  self._stopStallAbortTimeout();\n\n  if (self._scheduledReconnect) {\n    // if we already have a reconnect scheduled, don't schedule another one.\n    // this race condition can happen if the http.ClientRequest and http.IncomingMessage both emit `close`\n    return;\n  }\n\n  self._scheduleReconnect();\n};\n/**\n * Kick off the http request, and persist the connection\n *\n */\n\n\nStreamingAPIConnection.prototype.start = function () {\n  this._resetRetryParams();\n\n  this._startPersistentConnection();\n\n  return this;\n};\n/**\n * Abort the http request, stop scheduled reconnect (if one was scheduled) and clear state\n *\n */\n\n\nStreamingAPIConnection.prototype.stop = function () {\n  // clear connection variables and timeout handles\n  this._resetConnection();\n\n  this._resetRetryParams();\n\n  return this;\n};\n/**\n * Stop and restart the stall abort timer (called when new data is received)\n *\n * If we go 90s without receiving data from twitter, we abort the request & reconnect.\n */\n\n\nStreamingAPIConnection.prototype._resetStallAbortTimeout = function () {\n  var self = this; // stop the previous stall abort timer\n\n  self._stopStallAbortTimeout(); //start a new 90s timeout to trigger a close & reconnect if no data received\n\n\n  self._stallAbortTimeout = setTimeout(function () {\n    self._scheduleReconnect();\n  }, 90000);\n  return this;\n};\n/**\n * Stop stall timeout\n *\n */\n\n\nStreamingAPIConnection.prototype._stopStallAbortTimeout = function () {\n  clearTimeout(this._stallAbortTimeout); // mark the timer as `null` so it is clear via introspection that the timeout is not scheduled\n\n  delete this._stallAbortTimeout;\n  return this;\n};\n/**\n * Computes the next time a reconnect should occur (based on the last HTTP response received)\n * and starts a timeout handle to begin reconnecting after `self._connectInterval` passes.\n *\n * @return {Undefined}\n */\n\n\nStreamingAPIConnection.prototype._scheduleReconnect = function () {\n  var self = this;\n\n  if (self.response && self.response.statusCode === 420) {\n    // we are being rate limited\n    // start with a 1 minute wait and double each attempt\n    if (!self._connectInterval) {\n      self._connectInterval = 60000;\n    } else {\n      self._connectInterval *= 2;\n    }\n  } else if (self.response && String(self.response.statusCode).charAt(0) === '5') {\n    // twitter 5xx errors\n    // start with a 5s wait, double each attempt up to 320s\n    if (!self._connectInterval) {\n      self._connectInterval = 5000;\n    } else if (self._connectInterval < 320000) {\n      self._connectInterval *= 2;\n    } else {\n      self._connectInterval = 320000;\n    }\n  } else {\n    // we did not get an HTTP response from our last connection attempt.\n    // DNS/TCP error, or a stall in the stream (and stall timer closed the connection)\n    if (!self._usedFirstReconnect) {\n      // first reconnection attempt on a valid connection should occur immediately\n      self._connectInterval = 0;\n      self._usedFirstReconnect = true;\n    } else if (self._connectInterval < 16000) {\n      // linearly increase delay by 250ms up to 16s\n      self._connectInterval += 250;\n    } else {\n      // cap out reconnect interval at 16s\n      self._connectInterval = 16000;\n    }\n  } // schedule the reconnect\n\n\n  self._scheduledReconnect = setTimeout(function () {\n    self._startPersistentConnection();\n  }, self._connectInterval);\n  self.emit('reconnect', self.request, self.response, self._connectInterval);\n};\n\nStreamingAPIConnection.prototype._setupParser = function () {\n  var self = this;\n  self.parser = new Parser(); // handle twitter objects as they come in - emit the generic `message` event\n  // along with the specific event corresponding to the message\n\n  self.parser.on('element', function (msg) {\n    self.emit('message', msg);\n\n    if (msg.delete) {\n      self.emit('delete', msg);\n    } else if (msg.disconnect) {\n      self._handleDisconnect(msg);\n    } else if (msg.limit) {\n      self.emit('limit', msg);\n    } else if (msg.scrub_geo) {\n      self.emit('scrub_geo', msg);\n    } else if (msg.warning) {\n      self.emit('warning', msg);\n    } else if (msg.status_withheld) {\n      self.emit('status_withheld', msg);\n    } else if (msg.user_withheld) {\n      self.emit('user_withheld', msg);\n    } else if (msg.friends || msg.friends_str) {\n      self.emit('friends', msg);\n    } else if (msg.direct_message) {\n      self.emit('direct_message', msg);\n    } else if (msg.event) {\n      self.emit('user_event', msg); // reference: https://dev.twitter.com/docs/streaming-apis/messages#User_stream_messages\n\n      var ev = msg.event;\n\n      if (ev === 'blocked') {\n        self.emit('blocked', msg);\n      } else if (ev === 'unblocked') {\n        self.emit('unblocked', msg);\n      } else if (ev === 'favorite') {\n        self.emit('favorite', msg);\n      } else if (ev === 'unfavorite') {\n        self.emit('unfavorite', msg);\n      } else if (ev === 'follow') {\n        self.emit('follow', msg);\n      } else if (ev === 'unfollow') {\n        self.emit('unfollow', msg);\n      } else if (ev === 'mute') {\n        self.emit('mute', msg);\n      } else if (ev === 'unmute') {\n        self.emit('unmute', msg);\n      } else if (ev === 'user_update') {\n        self.emit('user_update', msg);\n      } else if (ev === 'list_created') {\n        self.emit('list_created', msg);\n      } else if (ev === 'list_destroyed') {\n        self.emit('list_destroyed', msg);\n      } else if (ev === 'list_updated') {\n        self.emit('list_updated', msg);\n      } else if (ev === 'list_member_added') {\n        self.emit('list_member_added', msg);\n      } else if (ev === 'list_member_removed') {\n        self.emit('list_member_removed', msg);\n      } else if (ev === 'list_user_subscribed') {\n        self.emit('list_user_subscribed', msg);\n      } else if (ev === 'list_user_unsubscribed') {\n        self.emit('list_user_unsubscribed', msg);\n      } else if (ev === 'quoted_tweet') {\n        self.emit('quoted_tweet', msg);\n      } else if (ev === 'favorited_retweet') {\n        self.emit('favorited_retweet', msg);\n      } else if (ev === 'retweeted_retweet') {\n        self.emit('retweeted_retweet', msg);\n      } else {\n        self.emit('unknown_user_event', msg);\n      }\n    } else {\n      self.emit('tweet', msg);\n    }\n  });\n  self.parser.on('error', function (err) {\n    self.emit('parser-error', err);\n  });\n  self.parser.on('connection-limit-exceeded', function (err) {\n    self.emit('error', err);\n  });\n};\n\nStreamingAPIConnection.prototype._handleDisconnect = function (twitterMsg) {\n  this.emit('disconnect', twitterMsg);\n  this.stop();\n};\n/**\n * Call whenever an http request is about to be made to update\n * our local timestamp (used for Oauth) to be Twitter's server time.\n *\n */\n\n\nStreamingAPIConnection.prototype._setOauthTimestamp = function () {\n  var self = this;\n\n  if (self.reqOpts.oauth) {\n    var oauth_ts = Date.now() + self._twitter_time_minus_local_time_ms;\n\n    self.reqOpts.oauth.timestamp = Math.floor(oauth_ts / 1000).toString();\n  }\n};\n/**\n * Call whenever an http response is received from Twitter,\n * to set our local timestamp offset from Twitter's server time.\n * This is used to set the Oauth timestamp for our next http request\n * to Twitter (by calling _setOauthTimestamp).\n *\n * @param  {http.IncomingResponse} resp   http response received from Twitter.\n */\n\n\nStreamingAPIConnection.prototype._updateOauthTimestampOffsetFromResponse = function (resp) {\n  if (resp && resp.headers && resp.headers.date && new Date(resp.headers.date).toString() !== 'Invalid Date') {\n    var twitterTimeMs = new Date(resp.headers.date).getTime();\n    this._twitter_time_minus_local_time_ms = twitterTimeMs - Date.now();\n  }\n};\n\nmodule.exports = StreamingAPIConnection;","map":null,"metadata":{},"sourceType":"script"}