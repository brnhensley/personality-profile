{"ast":null,"code":"var querystring = require('querystring');\n\nvar request = require('request');\n\nvar endpoints = require('./endpoints');\n/**\n * Encodes object as a querystring, to be used as the suffix of request URLs.\n * @param  {Object} obj\n * @return {String}\n */\n\n\nexports.makeQueryString = function (obj) {\n  var qs = querystring.stringify(obj);\n  qs = qs.replace(/\\!/g, \"%21\").replace(/\\'/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\").replace(/\\*/g, \"%2A\");\n  return qs;\n};\n/**\n * For each `/:param` fragment in path, move the value in params\n * at that key to path. If the key is not found in params, throw.\n * Modifies both params and path values.\n *\n * @param  {Objet} params  Object used to build path.\n * @param  {String} path   String to transform.\n * @return {Undefined}\n *\n */\n\n\nexports.moveParamsIntoPath = function (params, path) {\n  var rgxParam = /\\/:(\\w+)/g;\n  var missingParamErr = null;\n  path = path.replace(rgxParam, function (hit) {\n    var paramName = hit.slice(2);\n    var suppliedVal = params[paramName];\n\n    if (!suppliedVal) {\n      throw new Error('Twit: Params object is missing a required parameter for this request: `' + paramName + '`');\n    }\n\n    var retVal = '/' + suppliedVal;\n    delete params[paramName];\n    return retVal;\n  });\n  return path;\n};\n/**\n * When Twitter returns a response that looks like an error response,\n * use this function to attach the error info in the response body to `err`.\n *\n * @param  {Error} err   Error instance to which body info will be attached\n * @param  {Object} body JSON object that is the deserialized HTTP response body received from Twitter\n * @return {Undefined}\n */\n\n\nexports.attachBodyInfoToError = function (err, body) {\n  err.twitterReply = body;\n\n  if (!body) {\n    return;\n  }\n\n  if (body.error) {\n    // the body itself is an error object\n    err.message = body.error;\n    err.allErrors = err.allErrors.concat([body]);\n  } else if (body.errors && body.errors.length) {\n    // body contains multiple error objects\n    err.message = body.errors[0].message;\n    err.code = body.errors[0].code;\n    err.allErrors = err.allErrors.concat(body.errors);\n  }\n};\n\nexports.makeTwitError = function (message) {\n  var err = new Error();\n\n  if (message) {\n    err.message = message;\n  }\n\n  err.code = null;\n  err.allErrors = [];\n  err.twitterReply = null;\n  return err;\n};\n/**\n * Get a bearer token for OAuth2\n * @param  {String}   consumer_key\n * @param  {String}   consumer_secret\n * @param  {Function} cb\n *\n * Calls `cb` with Error, String\n *\n * Error (if it exists) is guaranteed to be Twit error-formatted.\n * String (if it exists) is the bearer token received from Twitter.\n */\n\n\nexports.getBearerToken = function (consumer_key, consumer_secret, cb) {\n  // use OAuth 2 for app-only auth (Twitter requires this)\n  // get a bearer token using our app's credentials\n  var b64Credentials = new Buffer(consumer_key + ':' + consumer_secret).toString('base64');\n  request.post({\n    url: endpoints.API_HOST + 'oauth2/token',\n    headers: {\n      'Authorization': 'Basic ' + b64Credentials,\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    },\n    body: 'grant_type=client_credentials',\n    json: true\n  }, function (err, res, body) {\n    if (err) {\n      var error = exports.makeTwitError(err.toString());\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    if (!body) {\n      var error = exports.makeTwitError('Not valid reply from Twitter upon obtaining bearer token');\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    if (body.token_type !== 'bearer') {\n      var error = exports.makeTwitError('Unexpected reply from Twitter upon obtaining bearer token');\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    return cb(err, body.access_token);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}