{"ast":null,"code":"//\n//  Twitter API Wrapper\n//\nvar assert = require('assert');\n\nvar Promise = require('bluebird');\n\nvar request = require('request');\n\nvar util = require('util');\n\nvar endpoints = require('./endpoints');\n\nvar FileUploader = require('./file_uploader');\n\nvar helpers = require('./helpers');\n\nvar StreamingAPIConnection = require('./streaming-api-connection');\n\nvar STATUS_CODES_TO_ABORT_ON = require('./settings').STATUS_CODES_TO_ABORT_ON; // config values required for app-only auth\n\n\nvar required_for_app_auth = ['consumer_key', 'consumer_secret']; // config values required for user auth (superset of app-only auth)\n\nvar required_for_user_auth = required_for_app_auth.concat(['access_token', 'access_token_secret']);\nvar FORMDATA_PATHS = ['media/upload', 'account/update_profile_image', 'account/update_profile_background_image'];\nvar JSONPAYLOAD_PATHS = ['media/metadata/create', 'direct_messages/events/new', 'direct_messages/welcome_messages/new', 'direct_messages/welcome_messages/rules/new']; //\n//  Twitter\n//\n\nvar Twitter = function (config) {\n  if (!(this instanceof Twitter)) {\n    return new Twitter(config);\n  }\n\n  var self = this;\n  var credentials = {\n    consumer_key: config.consumer_key,\n    consumer_secret: config.consumer_secret,\n    // access_token and access_token_secret only required for user auth\n    access_token: config.access_token,\n    access_token_secret: config.access_token_secret,\n    // flag indicating whether requests should be made with application-only auth\n    app_only_auth: config.app_only_auth\n  };\n\n  this._validateConfigOrThrow(config);\n\n  this.config = config;\n  this._twitter_time_minus_local_time_ms = 0;\n};\n\nTwitter.prototype.get = function (path, params, callback) {\n  return this.request('GET', path, params, callback);\n};\n\nTwitter.prototype.post = function (path, params, callback) {\n  return this.request('POST', path, params, callback);\n};\n\nTwitter.prototype.delete = function (path, params, callback) {\n  return this.request('DELETE', path, params, callback);\n};\n\nTwitter.prototype.request = function (method, path, params, callback) {\n  var self = this;\n  assert(method == 'GET' || method == 'POST' || method == 'DELETE'); // if no `params` is specified but a callback is, use default params\n\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  }\n\n  return new Promise(function (resolve, reject) {\n    var _returnErrorToUser = function (err) {\n      if (callback && typeof callback === 'function') {\n        callback(err, null, null);\n      } else {\n        reject(err);\n      }\n    };\n\n    self._buildReqOpts(method, path, params, false, function (err, reqOpts) {\n      if (err) {\n        _returnErrorToUser(err);\n\n        return;\n      }\n\n      var twitOptions = params && params.twit_options || {};\n      process.nextTick(function () {\n        // ensure all HTTP i/o occurs after the user has a chance to bind their event handlers\n        self._doRestApiRequest(reqOpts, twitOptions, method, function (err, parsedBody, resp) {\n          self._updateClockOffsetFromResponse(resp);\n\n          var peerCertificate = resp && resp.socket && resp.socket.getPeerCertificate();\n\n          if (self.config.trusted_cert_fingerprints && peerCertificate) {\n            if (!resp.socket.authorized) {\n              // The peer certificate was not signed by one of the authorized CA's.\n              var authErrMsg = resp.socket.authorizationError.toString();\n              var err = helpers.makeTwitError('The peer certificate was not signed; ' + authErrMsg);\n\n              _returnErrorToUser(err);\n\n              return;\n            }\n\n            var fingerprint = peerCertificate.fingerprint;\n            var trustedFingerprints = self.config.trusted_cert_fingerprints;\n\n            if (trustedFingerprints.indexOf(fingerprint) === -1) {\n              var errMsg = util.format('Certificate untrusted. Trusted fingerprints are: %s. Got fingerprint: %s.', trustedFingerprints.join(','), fingerprint);\n              var err = new Error(errMsg);\n\n              _returnErrorToUser(err);\n\n              return;\n            }\n          }\n\n          if (callback && typeof callback === 'function') {\n            callback(err, parsedBody, resp);\n          } else {\n            if (err) {\n              reject(err);\n            } else {\n              resolve({\n                data: parsedBody,\n                resp: resp\n              });\n            }\n          }\n\n          return;\n        });\n      });\n    });\n  });\n};\n/**\n * Uploads a file to Twitter via the POST media/upload (chunked) API.\n * Use this as an easier alternative to doing the INIT/APPEND/FINALIZE commands yourself.\n * Returns the response from the FINALIZE command, or if an error occurs along the way,\n * the first argument to `cb` will be populated with a non-null Error.\n *\n *\n * `params` is an Object of the form:\n * {\n *   file_path: String // Absolute path of file to be uploaded.\n * }\n *\n * @param  {Object}  params  options object (described above).\n * @param  {cb}      cb      callback of the form: function (err, bodyObj, resp)\n */\n\n\nTwitter.prototype.postMediaChunked = function (params, cb) {\n  var self = this;\n\n  try {\n    var fileUploader = new FileUploader(params, self);\n  } catch (err) {\n    cb(err);\n    return;\n  }\n\n  fileUploader.upload(cb);\n};\n\nTwitter.prototype._updateClockOffsetFromResponse = function (resp) {\n  var self = this;\n\n  if (resp && resp.headers && resp.headers.date && new Date(resp.headers.date).toString() !== 'Invalid Date') {\n    var twitterTimeMs = new Date(resp.headers.date).getTime();\n    self._twitter_time_minus_local_time_ms = twitterTimeMs - Date.now();\n  }\n};\n/**\n * Builds and returns an options object ready to pass to `request()`\n * @param  {String}   method      \"GET\" or \"POST\"\n * @param  {String}   path        REST API resource uri (eg. \"statuses/destroy/:id\")\n * @param  {Object}   params      user's params object\n * @param  {Boolean}  isStreaming Flag indicating if it's a request to the Streaming API (different endpoint)\n * @returns {Undefined}\n *\n * Calls `callback` with Error, Object where Object is an options object ready to pass to `request()`.\n *\n * Returns error raised (if any) by `helpers.moveParamsIntoPath()`\n */\n\n\nTwitter.prototype._buildReqOpts = function (method, path, params, isStreaming, callback) {\n  var self = this;\n\n  if (!params) {\n    params = {};\n  } // clone `params` object so we can modify it without modifying the user's reference\n\n\n  var paramsClone = JSON.parse(JSON.stringify(params)); // convert any arrays in `paramsClone` to comma-seperated strings\n\n  var finalParams = this.normalizeParams(paramsClone);\n  delete finalParams.twit_options; // the options object passed to `request` used to perform the HTTP request\n\n  var reqOpts = {\n    headers: {\n      'Accept': '*/*',\n      'User-Agent': 'twit-client'\n    },\n    gzip: true,\n    encoding: null\n  };\n\n  if (typeof self.config.timeout_ms !== 'undefined' && !isStreaming) {\n    reqOpts.timeout = self.config.timeout_ms;\n  }\n\n  if (typeof self.config.strictSSL !== 'undefined') {\n    reqOpts.strictSSL = self.config.strictSSL;\n  } // finalize the `path` value by building it using user-supplied params\n  // when json parameters should not be in the payload\n\n\n  if (JSONPAYLOAD_PATHS.indexOf(path) === -1) {\n    try {\n      path = helpers.moveParamsIntoPath(finalParams, path);\n    } catch (e) {\n      callback(e, null, null);\n      return;\n    }\n  }\n\n  if (path.match(/^https?:\\/\\//i)) {\n    // This is a full url request\n    reqOpts.url = path;\n  } else if (isStreaming) {\n    // This is a Streaming API request.\n    var stream_endpoint_map = {\n      user: endpoints.USER_STREAM,\n      site: endpoints.SITE_STREAM\n    };\n    var endpoint = stream_endpoint_map[path] || endpoints.PUB_STREAM;\n    reqOpts.url = endpoint + path + '.json';\n  } else {\n    // This is a REST API request.\n    if (path.indexOf('media/') !== -1) {\n      // For media/upload, use a different endpoint.\n      reqOpts.url = endpoints.MEDIA_UPLOAD + path + '.json';\n    } else {\n      reqOpts.url = endpoints.REST_ROOT + path + '.json';\n    }\n\n    if (FORMDATA_PATHS.indexOf(path) !== -1) {\n      reqOpts.headers['Content-type'] = 'multipart/form-data';\n      reqOpts.form = finalParams; // set finalParams to empty object so we don't append a query string\n      // of the params\n\n      finalParams = {};\n    } else if (JSONPAYLOAD_PATHS.indexOf(path) !== -1) {\n      reqOpts.headers['Content-type'] = 'application/json';\n      reqOpts.json = true;\n      reqOpts.body = finalParams; // as above, to avoid appending query string for body params\n\n      finalParams = {};\n    } else {\n      reqOpts.headers['Content-type'] = 'application/json';\n    }\n  }\n\n  if (isStreaming) {\n    reqOpts.form = finalParams;\n  } else if (Object.keys(finalParams).length) {\n    // not all of the user's parameters were used to build the request path\n    // add them as a query string\n    var qs = helpers.makeQueryString(finalParams);\n    reqOpts.url += '?' + qs;\n  }\n\n  if (!self.config.app_only_auth) {\n    // with user auth, we can just pass an oauth object to requests\n    // to have the request signed\n    var oauth_ts = Date.now() + self._twitter_time_minus_local_time_ms;\n\n    reqOpts.oauth = {\n      consumer_key: self.config.consumer_key,\n      consumer_secret: self.config.consumer_secret,\n      token: self.config.access_token,\n      token_secret: self.config.access_token_secret,\n      timestamp: Math.floor(oauth_ts / 1000).toString()\n    };\n    callback(null, reqOpts);\n    return;\n  } else {\n    // we're using app-only auth, so we need to ensure we have a bearer token\n    // Once we have a bearer token, add the Authorization header and return the fully qualified `reqOpts`.\n    self._getBearerToken(function (err, bearerToken) {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      reqOpts.headers['Authorization'] = 'Bearer ' + bearerToken;\n      callback(null, reqOpts);\n      return;\n    });\n  }\n};\n/**\n * Make HTTP request to Twitter REST API.\n * @param  {Object}   reqOpts     options object passed to `request()`\n * @param  {Object}   twitOptions\n * @param  {String}   method      \"GET\" or \"POST\"\n * @param  {Function} callback    user's callback\n * @return {Undefined}\n */\n\n\nTwitter.prototype._doRestApiRequest = function (reqOpts, twitOptions, method, callback) {\n  var request_method = request[method.toLowerCase()];\n  var req = request_method(reqOpts);\n  var body = '';\n  var response = null;\n\n  var onRequestComplete = function () {\n    if (body !== '') {\n      try {\n        body = JSON.parse(body);\n      } catch (jsonDecodeError) {\n        // there was no transport-level error, but a JSON object could not be decoded from the request body\n        // surface this to the caller\n        var err = helpers.makeTwitError('JSON decode error: Twitter HTTP response body was not valid JSON');\n        err.statusCode = response ? response.statusCode : null;\n        err.allErrors.concat({\n          error: jsonDecodeError.toString()\n        });\n        callback(err, body, response);\n        return;\n      }\n    }\n\n    if (typeof body === 'object' && (body.error || body.errors)) {\n      // we got a Twitter API-level error response\n      // place the errors in the HTTP response body into the Error object and pass control to caller\n      var err = helpers.makeTwitError('Twitter API Error');\n      err.statusCode = response ? response.statusCode : null;\n      helpers.attachBodyInfoToError(err, body);\n      callback(err, body, response);\n      return;\n    } // success case - no errors in HTTP response body\n\n\n    callback(err, body, response);\n  };\n\n  req.on('response', function (res) {\n    response = res; // read data from `request` object which contains the decompressed HTTP response body,\n    // `response` is the unmodified http.IncomingMessage object which may contain compressed data\n\n    req.on('data', function (chunk) {\n      body += chunk.toString('utf8');\n    }); // we're done reading the response\n\n    req.on('end', function () {\n      onRequestComplete();\n    });\n  });\n  req.on('error', function (err) {\n    // transport-level error occurred - likely a socket error\n    if (twitOptions.retry && STATUS_CODES_TO_ABORT_ON.indexOf(err.statusCode) !== -1) {\n      // retry the request since retries were specified and we got a status code we should retry on\n      self.request(method, path, params, callback);\n      return;\n    } else {\n      // pass the transport-level error to the caller\n      err.statusCode = null;\n      err.code = null;\n      err.allErrors = [];\n      helpers.attachBodyInfoToError(err, body);\n      callback(err, body, response);\n      return;\n    }\n  });\n};\n/**\n * Creates/starts a connection object that stays connected to Twitter's servers\n * using Twitter's rules.\n *\n * @param  {String} path   Resource path to connect to (eg. \"statuses/sample\")\n * @param  {Object} params user's params object\n * @return {StreamingAPIConnection}        [description]\n */\n\n\nTwitter.prototype.stream = function (path, params) {\n  var self = this;\n  var twitOptions = params && params.twit_options || {};\n  var streamingConnection = new StreamingAPIConnection();\n\n  self._buildReqOpts('POST', path, params, true, function (err, reqOpts) {\n    if (err) {\n      // we can get an error if we fail to obtain a bearer token or construct reqOpts\n      // surface this on the streamingConnection instance (where a user may register their error handler)\n      streamingConnection.emit('error', err);\n      return;\n    } // set the properties required to start the connection\n\n\n    streamingConnection.reqOpts = reqOpts;\n    streamingConnection.twitOptions = twitOptions;\n    process.nextTick(function () {\n      streamingConnection.start();\n    });\n  });\n\n  return streamingConnection;\n};\n/**\n * Gets bearer token from cached reference on `self`, or fetches a new one and sets it on `self`.\n *\n * @param  {Function} callback Function to invoke with (Error, bearerToken)\n * @return {Undefined}\n */\n\n\nTwitter.prototype._getBearerToken = function (callback) {\n  var self = this;\n\n  if (self._bearerToken) {\n    return callback(null, self._bearerToken);\n  }\n\n  helpers.getBearerToken(self.config.consumer_key, self.config.consumer_secret, function (err, bearerToken) {\n    if (err) {\n      // return the fully-qualified Twit Error object to caller\n      callback(err, null);\n      return;\n    }\n\n    self._bearerToken = bearerToken;\n    callback(null, self._bearerToken);\n    return;\n  });\n};\n\nTwitter.prototype.normalizeParams = function (params) {\n  var normalized = params;\n\n  if (params && typeof params === 'object') {\n    Object.keys(params).forEach(function (key) {\n      var value = params[key]; // replace any arrays in `params` with comma-separated string\n\n      if (Array.isArray(value)) normalized[key] = value.join(',');\n    });\n  } else if (!params) {\n    normalized = {};\n  }\n\n  return normalized;\n};\n\nTwitter.prototype.setAuth = function (auth) {\n  var self = this;\n  var configKeys = ['consumer_key', 'consumer_secret', 'access_token', 'access_token_secret']; // update config\n\n  configKeys.forEach(function (k) {\n    if (auth[k]) {\n      self.config[k] = auth[k];\n    }\n  });\n\n  this._validateConfigOrThrow(self.config);\n};\n\nTwitter.prototype.getAuth = function () {\n  return this.config;\n}; //\n// Check that the required auth credentials are present in `config`.\n// @param {Object}  config  Object containing credentials for REST API auth\n//\n\n\nTwitter.prototype._validateConfigOrThrow = function (config) {\n  //check config for proper format\n  if (typeof config !== 'object') {\n    throw new TypeError('config must be object, got ' + typeof config);\n  }\n\n  if (typeof config.timeout_ms !== 'undefined' && isNaN(Number(config.timeout_ms))) {\n    throw new TypeError('Twit config `timeout_ms` must be a Number. Got: ' + config.timeout_ms + '.');\n  }\n\n  if (typeof config.strictSSL !== 'undefined' && typeof config.strictSSL !== 'boolean') {\n    throw new TypeError('Twit config `strictSSL` must be a Boolean. Got: ' + config.strictSSL + '.');\n  }\n\n  if (config.app_only_auth) {\n    var auth_type = 'app-only auth';\n    var required_keys = required_for_app_auth;\n  } else {\n    var auth_type = 'user auth';\n    var required_keys = required_for_user_auth;\n  }\n\n  required_keys.forEach(function (req_key) {\n    if (!config[req_key]) {\n      var err_msg = util.format('Twit config must include `%s` when using %s.', req_key, auth_type);\n      throw new Error(err_msg);\n    }\n  });\n};\n\nmodule.exports = Twitter;","map":null,"metadata":{},"sourceType":"script"}