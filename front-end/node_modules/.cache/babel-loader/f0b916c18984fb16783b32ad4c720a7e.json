{"ast":null,"code":"var assert = require('assert');\n\nvar fs = require('fs');\n\nvar mime = require('mime');\n\nvar util = require('util');\n\nvar MAX_FILE_SIZE_BYTES = 15 * 1024 * 1024;\nvar MAX_FILE_CHUNK_BYTES = 5 * 1024 * 1024;\n/**\n * FileUploader class used to upload a file to twitter via the /media/upload (chunked) API.\n * Usage:\n *   var fu = new FileUploader({ file_path: '/foo/bar/baz.mp4' }, twit);\n *   fu.upload(function (err, bodyObj, resp) {\n *     console.log(err, bodyObj);\n *   })\n *\n * @param  {Object}         params  Object of the form { file_path: String }.\n * @param  {Twit(object)}   twit    Twit instance.\n */\n\nvar FileUploader = function (params, twit) {\n  assert(params);\n  assert(params.file_path, 'Must specify `file_path` to upload a file. Got: ' + params.file_path + '.');\n  var self = this;\n  self._file_path = params.file_path;\n  self._twit = twit;\n  self._isUploading = false;\n  self._isFileStreamEnded = false;\n  self._isSharedMedia = !!params.shared;\n};\n/**\n * Upload a file to Twitter via the /media/upload (chunked) API.\n *\n * @param  {Function} cb function (err, data, resp)\n */\n\n\nFileUploader.prototype.upload = function (cb) {\n  var self = this; // Send INIT command with file info and get back a media_id_string we can use to APPEND chunks to it.\n\n  self._initMedia(function (err, bodyObj, resp) {\n    if (err) {\n      cb(err);\n      return;\n    } else {\n      var mediaTmpId = bodyObj.media_id_string;\n      var chunkNumber = 0;\n      var mediaFile = fs.createReadStream(self._file_path, {\n        highWatermark: MAX_FILE_CHUNK_BYTES\n      });\n      mediaFile.on('data', function (chunk) {\n        // Pause our file stream from emitting `data` events until the upload of this chunk completes.\n        // Any data that becomes available will remain in the internal buffer.\n        mediaFile.pause();\n        self._isUploading = true;\n\n        self._appendMedia(mediaTmpId, chunk.toString('base64'), chunkNumber, function (err, bodyObj, resp) {\n          self._isUploading = false;\n\n          if (err) {\n            cb(err);\n          } else {\n            if (self._isUploadComplete()) {\n              // We've hit the end of our stream; send FINALIZE command.\n              self._finalizeMedia(mediaTmpId, cb);\n            } else {\n              // Tell our file stream to start emitting `data` events again.\n              chunkNumber++;\n              mediaFile.resume();\n            }\n          }\n        });\n      });\n      mediaFile.on('end', function () {\n        // Mark our file streaming complete, and if done, send FINALIZE command.\n        self._isFileStreamEnded = true;\n\n        if (self._isUploadComplete()) {\n          self._finalizeMedia(mediaTmpId, cb);\n        }\n      });\n    }\n  });\n};\n\nFileUploader.prototype._isUploadComplete = function () {\n  return !this._isUploading && this._isFileStreamEnded;\n};\n/**\n * Send FINALIZE command for media object with id `media_id`.\n *\n * @param  {String}   media_id\n * @param  {Function} cb\n */\n\n\nFileUploader.prototype._finalizeMedia = function (media_id, cb) {\n  var self = this;\n\n  self._twit.post('media/upload', {\n    command: 'FINALIZE',\n    media_id: media_id\n  }, cb);\n};\n/**\n * Send APPEND command for media object with id `media_id`.\n * Append the chunk to the media object, then resume streaming our mediaFile.\n *\n * @param  {String}   media_id        media_id_string received from Twitter after sending INIT comand.\n * @param  {String}   chunk_part      Base64-encoded String chunk of the media file.\n * @param  {Number}   segment_index   Index of the segment.\n * @param  {Function} cb\n */\n\n\nFileUploader.prototype._appendMedia = function (media_id_string, chunk_part, segment_index, cb) {\n  var self = this;\n\n  self._twit.post('media/upload', {\n    command: 'APPEND',\n    media_id: media_id_string.toString(),\n    segment_index: segment_index,\n    media: chunk_part\n  }, cb);\n};\n/**\n * Send INIT command for our underlying media object.\n *\n * @param  {Function} cb\n */\n\n\nFileUploader.prototype._initMedia = function (cb) {\n  var self = this;\n  var mediaType = mime.lookup(self._file_path);\n  var mediaFileSizeBytes = fs.statSync(self._file_path).size;\n  var shared = self._isSharedMedia;\n  var media_category = 'tweet_image';\n\n  if (mediaType.toLowerCase().indexOf('gif') > -1) {\n    media_category = 'tweet_gif';\n  } else if (mediaType.toLowerCase().indexOf('video') > -1) {\n    media_category = 'tweet_video';\n  } // Check the file size - it should not go over 15MB for video.\n  // See https://dev.twitter.com/rest/reference/post/media/upload-chunked\n\n\n  if (mediaFileSizeBytes < MAX_FILE_SIZE_BYTES) {\n    self._twit.post('media/upload', {\n      'command': 'INIT',\n      'media_type': mediaType,\n      'total_bytes': mediaFileSizeBytes,\n      'shared': shared,\n      'media_category': media_category\n    }, cb);\n  } else {\n    var errMsg = util.format('This file is too large. Max size is %dB. Got: %dB.', MAX_FILE_SIZE_BYTES, mediaFileSizeBytes);\n    cb(new Error(errMsg));\n  }\n};\n\nmodule.exports = FileUploader;","map":null,"metadata":{},"sourceType":"script"}